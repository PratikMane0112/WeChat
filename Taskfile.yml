version: '3'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: "{{.AWS_ACCOUNT_ID}}.dkr.ecr.{{.AWS_REGION}}.amazonaws.com"
  IMAGE_TAG: "{{.GIT_COMMIT}}"

vars:
  AWS_ACCOUNT_ID:
    sh: aws sts get-caller-identity --query Account --output text
  GIT_COMMIT:
    sh: git rev-parse --short HEAD

tasks:
  # Infrastructure Management
  infra:init:
    desc: Initialize Terraform
    dir: infrastructure/terraform
    cmds:
      - terraform init

  infra:plan:
    desc: Plan Terraform changes
    dir: infrastructure/terraform
    cmds:
      - terraform plan -var="environment={{.ENVIRONMENT}}" -var="db_password={{.DB_PASSWORD}}"
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "staging"}}'
      DB_PASSWORD: '{{.DB_PASSWORD | default "changeme123"}}'

  infra:apply:
    desc: Apply Terraform changes
    dir: infrastructure/terraform
    cmds:
      - terraform apply -var="environment={{.ENVIRONMENT}}" -var="db_password={{.DB_PASSWORD}}" -auto-approve
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "staging"}}'
      DB_PASSWORD: '{{.DB_PASSWORD | default "changeme123"}}'

  infra:destroy:
    desc: Destroy Terraform infrastructure
    dir: infrastructure/terraform
    cmds:
      - terraform destroy -var="environment={{.ENVIRONMENT}}" -var="db_password={{.DB_PASSWORD}}" -auto-approve
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "staging"}}'
      DB_PASSWORD: '{{.DB_PASSWORD | default "changeme123"}}'

  # Docker Operations
  docker:login:
    desc: Login to ECR
    cmds:
      - aws ecr get-login-password --region {{.AWS_REGION}} | docker login --username AWS --password-stdin {{.ECR_REGISTRY}}

  docker:build:
    desc: Build Docker images
    deps: [docker:login]
    cmds:
      - docker build -t wechat-backend:{{.IMAGE_TAG}} -f backend/Dockerfile backend/
      - docker build -t wechat-frontend:{{.IMAGE_TAG}} -f frontend/Dockerfile frontend/
      - docker tag wechat-backend:{{.IMAGE_TAG}} {{.ECR_REGISTRY}}/wechat-backend:{{.IMAGE_TAG}}
      - docker tag wechat-frontend:{{.IMAGE_TAG}} {{.ECR_REGISTRY}}/wechat-frontend:{{.IMAGE_TAG}}
      - docker tag wechat-backend:{{.IMAGE_TAG}} {{.ECR_REGISTRY}}/wechat-backend:latest
      - docker tag wechat-frontend:{{.IMAGE_TAG}} {{.ECR_REGISTRY}}/wechat-frontend:latest

  docker:push:
    desc: Push Docker images to ECR
    deps: [docker:build]
    cmds:
      - docker push {{.ECR_REGISTRY}}/wechat-backend:{{.IMAGE_TAG}}
      - docker push {{.ECR_REGISTRY}}/wechat-frontend:{{.IMAGE_TAG}}
      - docker push {{.ECR_REGISTRY}}/wechat-backend:latest
      - docker push {{.ECR_REGISTRY}}/wechat-frontend:latest

  # Testing
  test:backend:
    desc: Run backend tests with coverage
    dir: backend
    cmds:
      - mvn clean test
      - mvn jacoco:report
      - echo "✅ Backend tests completed with coverage report"

  test:backend:unit:
    desc: Run backend unit tests only
    dir: backend
    cmds:
      - mvn test -Dtest="**/*Test" -DfailIfNoTests=false
      - echo "✅ Unit tests completed"

  test:backend:integration:
    desc: Run backend integration tests
    dir: backend
    cmds:
      - mvn test -Dtest="**/*IntegrationTest" -DfailIfNoTests=false
      - echo "✅ Integration tests completed"

  test:backend:repository:
    desc: Run repository layer tests
    dir: backend
    cmds:
      - mvn test -Dtest="**/repository/*Test" -DfailIfNoTests=false
      - echo "✅ Repository tests completed"

  test:backend:service:
    desc: Run service layer tests
    dir: backend
    cmds:
      - mvn test -Dtest="**/service/*Test" -DfailIfNoTests=false
      - echo "✅ Service tests completed"

  test:backend:controller:
    desc: Run controller layer tests
    dir: backend
    cmds:
      - mvn test -Dtest="**/controller/*Test" -DfailIfNoTests=false
      - echo "✅ Controller tests completed"

  test:frontend:
    desc: Run frontend tests with coverage
    dir: frontend
    cmds:
      - npm ci
      - npm test -- --coverage --watchAll=false --verbose
      - echo "✅ Frontend tests completed with coverage report"

  test:frontend:unit:
    desc: Run frontend unit tests only
    dir: frontend
    cmds:
      - npm test -- --testPathPattern=".*\\.test\\.(js|jsx|ts|tsx)$" --watchAll=false
      - echo "✅ Frontend unit tests completed"

  test:frontend:component:
    desc: Run React component tests
    dir: frontend
    cmds:
      - npm test -- --testPathPattern="components/.*\\.test\\.(js|jsx)$" --watchAll=false
      - echo "✅ Component tests completed"

  test:security:
    desc: Run security scans
    cmds:
      - task: test:security:backend
      - task: test:security:frontend

  test:security:backend:
    desc: Run backend security scan
    dir: backend
    cmds:
      - mvn org.owasp:dependency-check-maven:check

  test:security:frontend:
    desc: Run frontend security audit
    dir: frontend
    cmds:
      - npm audit --audit-level=high

  test:integration:
    desc: Run integration tests
    cmds:
      - docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit
      - docker-compose -f docker-compose.test.yml down

  # Deployment
  deploy:staging:
    desc: Deploy to staging environment
    cmds:
      - task: docker:push
      - task: ecs:deploy
        vars:
          ENVIRONMENT: staging

  deploy:production:
    desc: Deploy to production environment
    cmds:
      - task: docker:push
      - task: ecs:deploy
        vars:
          ENVIRONMENT: production

  ecs:deploy:
    desc: Deploy to ECS
    cmds:
      - |
        # Update ECS service with new task definition
        aws ecs update-service \
          --cluster {{.ENVIRONMENT}}-wechat-cluster \
          --service {{.ENVIRONMENT}}-wechat-backend \
          --force-new-deployment
        
        aws ecs update-service \
          --cluster {{.ENVIRONMENT}}-wechat-cluster \
          --service {{.ENVIRONMENT}}-wechat-frontend \
          --force-new-deployment
        
        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster {{.ENVIRONMENT}}-wechat-cluster \
          --services {{.ENVIRONMENT}}-wechat-backend {{.ENVIRONMENT}}-wechat-frontend
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "staging"}}'

  # Database Operations
  db:migrate:
    desc: Run database migrations
    cmds:
      - |
        # Connect to RDS through bastion host and run migrations
        echo "Running database migrations..."
        # This would typically use Flyway or Liquibase
        
  db:seed:
    desc: Seed database with test data
    cmds:
      - |
        echo "Seeding database..."
        # Run seed scripts

  db:backup:
    desc: Backup database
    cmds:
      - |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        aws rds create-db-snapshot \
          --db-snapshot-identifier wechat-backup-$TIMESTAMP \
          --db-instance-identifier {{.ENVIRONMENT}}-wechat-postgres
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "staging"}}'

  # Monitoring & Logging
  logs:backend:
    desc: View backend logs
    cmds:
      - aws logs tail /ecs/{{.ENVIRONMENT}}-wechat-backend --follow
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "staging"}}'

  logs:frontend:
    desc: View frontend logs
    cmds:
      - aws logs tail /ecs/{{.ENVIRONMENT}}-wechat-frontend --follow
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "staging"}}'

  health:check:
    desc: Check application health
    cmds:
      - |
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names {{.ENVIRONMENT}}-wechat-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        
        echo "Checking frontend health..."
        curl -f http://$ALB_DNS/health
        
        echo "Checking backend health..."
        curl -f http://$ALB_DNS/actuator/health
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "staging"}}'

  # Cleanup
  cleanup:images:
    desc: Clean up old Docker images
    cmds:
      - docker system prune -af
      - docker image prune -af

  cleanup:aws:
    desc: Clean up AWS resources
    cmds:
      - |
        # Clean up old ECS task definitions
        aws ecs list-task-definitions --family-prefix {{.ENVIRONMENT}}-wechat --status INACTIVE \
          --query 'taskDefinitionArns[:-5]' --output text | \
          xargs -r -n1 aws ecs delete-task-definition --task-definition

  # Development helpers
  dev:setup:
    desc: Set up development environment
    cmds:
      - task: infra:init
      - task: test:backend
      - task: test:frontend
      - echo "Development environment ready!"

  dev:run:
    desc: Run application locally
    cmds:
      - docker-compose up --build

  dev:stop:
    desc: Stop local application
    cmds:
      - docker-compose down

  # CI/CD Pipeline simulation
  ci:build:
    desc: Run full CI pipeline
    cmds:
      - task: test:backend
      - task: test:frontend
      - task: test:security
      - task: docker:build
      - echo "✅ CI pipeline completed successfully"

  cd:deploy:
    desc: Run CD pipeline
    cmds:
      - task: docker:push
      - task: deploy:staging
      - task: health:check
        vars:
          ENVIRONMENT: staging
      - echo "✅ CD pipeline completed successfully"

  # Load testing
  load:test:
    desc: Run load tests against staging
    cmds:
      - |
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names staging-wechat-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        
        # Using k6 for load testing
        k6 run --vus 50 --duration 2m --env BASE_URL=http://$ALB_DNS load-tests/script.js

  # SSL Certificate management
  ssl:request:
    desc: Request SSL certificate
    cmds:
      - |
        aws acm request-certificate \
          --domain-name {{.DOMAIN_NAME}} \
          --subject-alternative-names *.{{.DOMAIN_NAME}} \
          --validation-method DNS \
          --region {{.AWS_REGION}}
    vars:
      DOMAIN_NAME: '{{.DOMAIN_NAME | default "wechat-social.com"}}'

  # Cost optimization
  cost:analyze:
    desc: Analyze AWS costs
    cmds:
      - |
        aws ce get-cost-and-usage \
          --time-period Start=2024-01-01,End=2024-12-31 \
          --granularity MONTHLY \
          --metrics BlendedCost \
          --group-by Type=DIMENSION,Key=SERVICE

  # Backup and restore
  backup:full:
    desc: Full system backup
    cmds:
      - task: db:backup
      - |
        # Backup S3 bucket
        aws s3 sync s3://{{.ENVIRONMENT}}-wechat-assets-{{.AWS_ACCOUNT_ID}} \
          s3://{{.ENVIRONMENT}}-wechat-backup-{{.AWS_ACCOUNT_ID}}/$(date +%Y%m%d)/ \
          --delete
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "staging"}}'

  # Help
  help:
    desc: Show available tasks
    cmds:
      - task --list
